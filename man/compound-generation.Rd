% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/main.R, R/compounds.R, R/utils-compounds.R,
%   R/compounds-metfrag.R, R/compounds-sirius.R
\name{compound-generation}
\alias{compound-generation}
\alias{generateCompounds,featureGroups-method}
\alias{generateCompounds}
\alias{compoundScorings}
\alias{generateCompoundsMetfrag,featureGroups-method}
\alias{generateCompoundsSIRIUS,featureGroups-method}
\title{Automatic compound identification}
\usage{
\S4method{generateCompounds}{featureGroups}(fGroups, MSPeakLists, algorithm, ...)

compoundScorings(
  algorithm = NULL,
  database = NULL,
  includeSuspectLists = TRUE,
  onlyDefault = FALSE,
  includeNoDB = TRUE
)

\S4method{generateCompoundsMetfrag}{featureGroups}(
  fGroups,
  MSPeakLists,
  method = "CL",
  logPath = file.path("log", "metfrag"),
  timeout = 300,
  timeoutRetries = 2,
  errorRetries = 2,
  topMost = 100,
  dbRelMzDev = 5,
  fragRelMzDev = 5,
  fragAbsMzDev = 0.002,
  adduct,
  database = "pubchem",
  extendedPubChem = "auto",
  chemSpiderToken = "",
  scoreTypes = compoundScorings("metfrag", database, onlyDefault = TRUE)$name,
  scoreWeights = 1,
  preProcessingFilters = c("UnconnectedCompoundFilter", "IsotopeFilter"),
  postProcessingFilters = c("InChIKeyFilter"),
  maxCandidatesToStop = 2500,
  identifiers = NULL,
  extraOpts = NULL,
  maxProcAmount = getOption("patRoon.maxProcAmount")
)

\S4method{generateCompoundsSIRIUS}{featureGroups}(
  fGroups,
  MSPeakLists,
  relMzDev = 5,
  adduct = "[M+H]+",
  elements = "CHNOP",
  profile = "qtof",
  formulaDatabase = NULL,
  fingerIDDatabase = "pubchem",
  noise = NULL,
  errorRetries = 2,
  cores = NULL,
  topMost = 100,
  topMostFormulas = 5,
  extraOptsGeneral = NULL,
  extraOptsFormula = NULL,
  verbose = TRUE,
  SIRBatchSize = 0,
  logPath = file.path("log", "sirius_compounds"),
  maxProcAmount = getOption("patRoon.maxProcAmount")
)
}
\arguments{
\item{fGroups}{\code{\link{featureGroups}} object for which compounds should
be identified. This should be the same or a subset of the object that was
used to create the specified \code{MSPeakLists}. In the case of a subset
only the remaining feature groups in the subset are considered.}

\item{MSPeakLists}{A \code{\link{MSPeakLists}} object that was generated for
the supplied \code{fGroups}.}

\item{algorithm}{A character string describing the algorithm that should be
used: \code{"metfrag"}, \code{"sirius"}}

\item{...}{Any parameters to be passed to the selected compound generation
algorithm.}

\item{database}{Compound database to use. Valid values are: \code{"pubchem"},
\code{"chemspider"}, \code{"for-ident"}, \code{"comptox"},
\code{"pubchemlite"}, \code{"kegg"}, \code{"sdf"}, \code{"psv"} and
\code{"csv"}. See section below for more information. Sets the
\code{MetFragDatabaseType} option.}

\item{includeSuspectLists, onlyDefault, includeNoDB}{A logical specifying
whether scoring terms releated to suspect lists, default scoring terms and
non-database specific scoring terms should be included in the output,
respectively.}

\item{method}{Which method should be used for MetFrag execution: \code{"CL"}
for \command{MetFragCL} and \code{"R"} for \command{MetFragR}. The former
might be faster.}

\item{logPath}{Destination directory for log files with output from executed
commands. Will be created if non-existant. Set to \code{NULL} to disable
logging.}

\item{timeout}{Maximum time (in seconds) before a metFrag query for a feature
group is stopped. Also see \code{timeoutRetries} argument.}

\item{timeoutRetries}{Maximum number of retries after reaching a timeout
before completely skipping the metFrag query for a feature group. Also see
\code{timeout} argument.}

\item{errorRetries}{Maximum number of retries after an error occurred. This
may be useful to handle e.g. connection errors.}

\item{topMost}{Only keep this number of candidates (per feature group) with
highest score. Set to \code{NULL} to always keep all candidates,
however, please note that this may result in significant usage of CPU/RAM
resources for large numbers of candidates.}

\item{dbRelMzDev}{Relative mass deviation (in ppm) for database search. Sets
the \option{DatabaseSearchRelativeMassDeviation} option.}

\item{fragRelMzDev}{Relative mass deviation (in ppm) for fragment matching.
Sets the \option{FragmentPeakMatchRelativeMassDeviation} option.}

\item{fragAbsMzDev}{Absolute mass deviation (in Da) for fragment matching.
Sets the \option{FragmentPeakMatchAbsoluteMassDeviation} option.}

\item{adduct}{An \code{\link{adduct}} object (or something that can be
converted to it with \code{\link{as.adduct}}). Examples: \code{"[M-H]-"},
\code{"[M+Na]+"}.}

\item{extendedPubChem}{If \code{database="pubchem"}: whether to use the
\emph{extended} database that includes information for compound scoring
(\emph{i.e.} number of patents/PubMed references). Note that downloading
candidates from this database might take extra time. Valid values are:
\code{FALSE} (never use it), \code{TRUE} (always use it) or \code{"auto"}
(default, use if specified scorings demand it).}

\item{chemSpiderToken}{A character string with the
\href{http://www.chemspider.com/AboutServices.aspx}{ChemSpider security
token} that should be set when the ChemSpider database is used. Sets the
\option{ChemSpiderToken} option.}

\item{scoreTypes}{A character vector defining the scoring types. See the
\verb{Scorings} section below for more information. Note that both generic
and \command{MetFrag} specific names are accepted (\emph{i.e.} \code{name}
and \code{metfrag} columns returned by \code{compoundScorings}). When a
local database is used, the name should match what is given there
(\code{e.g} column names when \code{database=csv}). Note that MetFrag may
still report other scoring data, however, these are not used for ranking.
Sets the \option{MetFragScoreTypes} option.}

\item{scoreWeights}{Numeric vector containing weights of the used scoring
types. Order is the same as set in \code{scoreTypes}. Values are recycled
if necessary. Sets the \option{MetFragScoreWeights} option.}

\item{preProcessingFilters, postProcessingFilters}{A character vector defining
pre/post filters applied before/after fragmentation and scoring
(\emph{e.g.} \code{"UnconnectedCompoundFilter"}, \code{"IsotopeFilter"},
\code{"ElementExclusionFilter"}). Some methods require further options to
be set. For all filters and more information refer to the \verb{Candidate
Filters} section on the
\href{http://ipb-halle.github.io/MetFrag/projects/metfragr/}{MetFragR
homepage}. Sets the \option{MetFragPreProcessingCandidateFilter} and
\code{MetFragPostProcessingCandidateFilter} options.}

\item{maxCandidatesToStop}{If more than this number of candidate structures
are found then processing will be aborted and no results this feature group
will be reported. Low values increase the chance of missing data, whereas
too high values will use too much computer resources and signficantly
slowdown the process. Sets the \option{MaxCandidateLimitToStop} option.}

\item{identifiers}{A \code{list} containing for each feature group a
character vector with database identifiers that should be used to find
candidates for a feature group (the list should be named by feature group
names). If \code{NULL} all relevant candidates will be retrieved from the
specified database. An example usage scenario is to obtain the list of
candidate identifiers from a \code{\link{compounds}} object obtained with
\code{\link{generateCompoundsSIRIUS}} using the \code{\link{identifiers}}
method. This way, only those candidates will be searched by MetFrag that
were generated by SIRIUS+CSI:FingerID. Sets the
\option{PrecursorCompoundIDs} option.}

\item{extraOpts}{For \command{MetFrag}: A named \code{list} containing
  further settings to be passed to \code{\link[metfRag]{run.metfrag}}. See
  the \href{http://ipb-halle.github.io/MetFrag/projects/metfragr/}{MetFragR}
  and \href{http://ipb-halle.github.io/MetFrag/projects/metfragcl/}{MetFrag
  CL} homepages for all available options.

  For \command{SIRIUS}: a \code{character} vector with any extra commandline
  parameters for formula prediction. See the SIRIUS manual for more details.

  Set to \code{NULL} to ignore.}

\item{maxProcAmount}{Maximum number of processes to run for parallelization.
Usually a number close to the amount of physical cores yields most
efficient results.}

\item{relMzDev}{Maximum relative deviation between the measured and candidate
formula \emph{m/z} values (in ppm). Sets the \option{--ppm-max} commandline
option.}

\item{elements}{Elements to be considered for formulae calculation. This will
heavily affects the number of candidates! Always try to work with a minimal
set by excluding elements you don't expect. The minimum/maximum number
of elements can also be specified, for example: a value of
\code{"C[5]H[10-15]O"} will only consider formulae with up to five carbon
atoms, between ten and fifteen hydrogen atoms and any amount of oxygen
atoms. Sets the \option{--elements} commandline option.}

\item{profile}{Name of the configuration profile, for example:
\option{"qtof"}, \option{"orbitrap"}, \option{"fticr"}. Sets the
\option{--profile} commandline option.}

\item{formulaDatabase}{If not \code{NULL},
use a database for retrieval of formula candidates. Possible values are:
\option{"pubchem"}, \option{"bio"}, \option{"kegg"}, \option{"hmdb"}. Sets
the \option{--database} commandline option.}

\item{fingerIDDatabase}{Database specifically used for
\command{CSI:FingerID}. If \code{NULL}, the value of the
\code{formulaDatabase} parameter will be used or \code{"pubchem"} when that
is also \code{NULL}. Sets the \option{--fingerid-db} option.}

\item{noise}{Median intensity of the noise (\code{NULL} ignores this
parameter). Sets the \option{--noise} commandline option.}

\item{cores}{The number of cores \command{SIRIUS} will use. If \code{NULL}
then the default of all cores will be used.}

\item{topMostFormulas}{Do not return more than this number of candidate
formulae. Note that only compounds for these formulae will be searched.
Sets the \option{--candidates} commandline option.}

\item{extraOptsGeneral, extraOptsFormula}{a \code{character} vector with any
extra commandline parameters for \command{SIRIUS}. For \command{SIRIUS}
versions \code{<4.4} there is no distinction between general and formula
options. Otherwise commandline options specified in \code{extraOptsGeneral}
are added prior to the \code{formula} command, while options specified in
\code{extraOptsFormula} are added in afterwards. See the \command{SIRIUS}
manual for more details. Set to \code{NULL} to ignore.}

\item{verbose}{If \code{TRUE} then more output is shown in the terminal.}

\item{SIRBatchSize}{The maximum number of calculations done by
\command{SIRIUS}. If this number is less than the amount of features to be
calculated then calculations will be evenly split over multiple
\command{SIRIUS} calls (which may be run in parallel if
\command{maxProcAmount>1}). If \code{SIRBatchSize=0} then all feature
calculations are performed from a single \command{SIRIUS} exection, which
is often the fastest.}
}
\value{
\code{compoundScorings} returns a \code{data.frame} with information
  on which scoring terms are used, what their algorithm specific name is and
  other information such as to which database they apply and short remarks.

\code{generateCompoundsMetFrag} returns a \code{\link{compoundsMF}}
  object.

\code{generateCompoundsSIRIUS} returns a \code{\link{compounds}}
  object.
}
\description{
Functionality to automatically identify chemical compounds from feature
groups.
}
\details{
Several algorithms are provided to automatically identify compounds for given
feature groups. To this end, each measured masses for all feature groups are
searched within online database(s) (\emph{e.g.}
\href{https://pubchem.ncbi.nlm.nih.gov/}{PubChem}) to retrieve a list of
potential candidate chemical compounds. Depending on the algorithm and its
parameters, further scoring of candidates is then performed using, for
instance, matching of measured and theoretical isotopic patterns, presence
within other data sources such as patent databases and similarity of measured
and in-silico predicted MS/MS fragments. Note that this process is often
quite time consuming, especially for large feature group sets. Therefore,
this is often one of the last steps within the workflow and not performed
before feature groups have been prioritized.

\code{generateCompounds} is a generic function that will generate compounds
  using one of the supported algorithms. The actual functionality is provided
  by algorithm specific functions such as \code{generateCompoundsMetfrag} and
  \code{generateCompoundsSIRIUS}. While these functions may be called directly,
  \code{generateCompounds} provides a generic interface and is therefore usually
  preferred.

\code{compoundScorings} displays an overview of scorings may be
  applied to rank candidate compounds (see \verb{Scorings} section below).

\code{generateCompoundsMetfrag} uses the \pkg{metfRag} package or
  \command{MetFrag CL} for compound identification (see
  \url{http://ipb-halle.github.io/MetFrag/}). Several online compound
  databases such as \href{https://pubchem.ncbi.nlm.nih.gov/}{PubChem} and
  \href{http://www.chemspider.com/}{ChemSpider} may be chosen for retrieval
  of candidate structures. In addition, many options exist to score and
  filter resulting data, and it is highly suggested to optimize these to
  improve results. While MS/MS data is not mandatory, it will usually greatly
  improve candidate scoring. The \command{MetFrag} options \code{PeakList},
  \code{IonizedPrecursorMass} and \code{ExperimentalRetentionTimeValue} (in
  minutes) fields are automatically set from feature data.

\code{generateCompoundsSIRIUS} uses
  \href{https://bio.informatik.uni-jena.de/software/sirius/}{SIRIUS} in
  combination with \href{https://www.csi-fingerid.uni-jena.de/}{CSI:FingerID}
  for compound identification. Similar to
  \code{\link{generateFormulasSIRIUS}}, candidate formulae are generated with
  SIRIUS. These results are then feed to CSI:FingerID to acquire candidate
  structures. This method requires the availability
  of MS/MS data, and feature groups without it will be ignored.
}
\note{
For annotations performed with \command{SIRIUS} it is often the fastest
  to keep the default \code{SIRBatchSize=0}. In this case, the
  \code{maxProcAmount} argument will be ignored and all \command{SIRIUS}
  output will be printed to the terminal (unless \code{verbose=FALSE}).
}
\section{Scorings}{
 Each algorithm implements their own scoring system. Their
  names have been simplified and harmonized where possible and are used for
  reporting and in the case \command{MetFrag} is used to specify how
  compounds should be scored (\code{scoreTypes} argument). The
  \code{compoundScorings} function can be used to get an overview of both the
  algorithm specific and generic scoring names. For instance, the table below
  shows all scorings for \command{MetFrag}: (some columns are omitted)

 \tabular{lll}{
  \strong{name}       \tab \strong{metfrag}                                \tab \strong{database}\cr
  score                \tab Score                                            \tab                   \cr
  fragScore            \tab FragmenterScore                                  \tab                   \cr
  metFusionScore       \tab OfflineMetFusionScore                            \tab                   \cr
  individualMoNAScore  \tab OfflineIndividualMoNAScore                       \tab                   \cr
  numberPatents        \tab PubChemNumberPatents                             \tab pubchem           \cr
  numberPatents        \tab Patent_Count                                     \tab pubchemlite       \cr
  pubMedReferences     \tab PubChemNumberPubMedReferences                    \tab pubchem           \cr
  pubMedReferences     \tab ChemSpiderNumberPubMedReferences                 \tab chemspider        \cr
  pubMedReferences     \tab NUMBER_OF_PUBMED_ARTICLES                        \tab comptox           \cr
  pubMedReferences     \tab PubMed_Count                                     \tab pubchemlite       \cr
  extReferenceCount    \tab ChemSpiderNumberExternalReferences               \tab chemspider        \cr
  dataSourceCount      \tab ChemSpiderDataSourceCount                        \tab chemspider        \cr
  referenceCount       \tab ChemSpiderReferenceCount                         \tab chemspider        \cr
  RSCCount             \tab ChemSpiderRSCCount                               \tab chemspider        \cr
  smartsInclusionScore \tab SmartsSubstructureInclusionScore                 \tab                   \cr
  smartsExclusionScore \tab SmartsSubstructureExclusionScore                 \tab                   \cr
  suspectListScore     \tab SuspectListScore                                 \tab                   \cr
  retentionTimeScore   \tab RetentionTimeScore                               \tab                   \cr
  CPDATCount           \tab CPDAT_COUNT                                      \tab comptox           \cr
  TOXCASTActive        \tab TOXCAST_PERCENT_ACTIVE                           \tab comptox           \cr
  dataSources          \tab DATA_SOURCES                                     \tab comptox           \cr
  pubChemDataSources   \tab PUBCHEM_DATA_SOURCES                             \tab comptox           \cr
  EXPOCASTPredExpo     \tab EXPOCAST_MEDIAN_EXPOSURE_PREDICTION_MG/KG-BW/DAY \tab comptox           \cr
  ECOTOX               \tab ECOTOX                                           \tab comptox           \cr
  NORMANSUSDAT         \tab NORMANSUSDAT                                     \tab comptox           \cr
  MASSBANKEU           \tab MASSBANKEU                                       \tab comptox           \cr
  TOX21SL              \tab TOX21SL                                          \tab comptox           \cr
  TOXCAST              \tab TOXCAST                                          \tab comptox           \cr
  KEMIMARKET           \tab KEMIMARKET                                       \tab comptox           \cr
  MZCLOUD              \tab MZCLOUD                                          \tab comptox           \cr
  pubMedNeuro          \tab PubMedNeuro                                      \tab comptox           \cr
  CIGARETTES           \tab CIGARETTES                                       \tab comptox           \cr
  INDOORCT16           \tab INDOORCT16                                       \tab comptox           \cr
  SRM2585DUST          \tab SRM2585DUST                                      \tab comptox           \cr
  SLTCHEMDB            \tab SLTCHEMDB                                        \tab comptox           \cr
  THSMOKE              \tab THSMOKE                                          \tab comptox           \cr
  ITNANTIBIOTIC        \tab ITNANTIBIOTIC                                    \tab comptox           \cr
  STOFFIDENT           \tab STOFFIDENT                                       \tab comptox           \cr
  KEMIMARKET_EXPO      \tab KEMIMARKET_EXPO                                  \tab comptox           \cr
  KEMIMARKET_HAZ       \tab KEMIMARKET_HAZ                                   \tab comptox           \cr
  REACH2017            \tab REACH2017                                        \tab comptox           \cr
  KEMIWW_WDUIndex      \tab KEMIWW_WDUIndex                                  \tab comptox           \cr
  KEMIWW_StpSE         \tab KEMIWW_StpSE                                     \tab comptox           \cr
  KEMIWW_SEHitsOverDL  \tab KEMIWW_SEHitsOverDL                              \tab comptox           \cr
  ZINC15PHARMA         \tab ZINC15PHARMA                                     \tab comptox           \cr
  PFASMASTER           \tab PFASMASTER                                       \tab comptox           \cr
  peakFingerprintScore \tab AutomatedPeakFingerprintAnnotationScore          \tab                   \cr
  lossFingerprintScore \tab AutomatedLossFingerprintAnnotationScore          \tab                   \cr
  agroChemInfo         \tab AgroChemInfo                                     \tab pubchemlite       \cr
  bioPathway           \tab BioPathway                                       \tab pubchemlite       \cr
  drugMedicInfo        \tab DrugMedicInfo                                    \tab pubchemlite       \cr
  foodRelated          \tab FoodRelated                                      \tab pubchemlite       \cr
  pharmacoInfo         \tab PharmacoInfo                                     \tab pubchemlite       \cr
  safetyInfo           \tab SafetyInfo                                       \tab pubchemlite       \cr
  toxicityInfo         \tab ToxicityInfo                                     \tab pubchemlite       \cr
  knownUse             \tab KnownUse                                         \tab pubchemlite       \cr
  annoTypeCount        \tab FPSum                                            \tab pubchemlite       \cr
  annoTypeCount        \tab AnnoTypeCount                                    \tab pubchemlite       
}

 In addition, the \code{compoundScorings} function is also
  useful to programatically generate  a set of scorings to be used by
  \command{MetFrag}. For instance, the following can be given to the
  \code{scoreTypes} argument to use all default scorings for PubChem:
  \code{compoundScorings("metfrag", "pubchem", onlyDefault=TRUE)$name}.

  For all \command{MetFrag} scoring types refer to the \verb{Candidate
  Scores} section on the
  \href{http://ipb-halle.github.io/MetFrag/projects/metfragr/}{MetFragR
  homepage}.
}

\section{Usage of MetFrag databases}{
 When \code{database="chemspider"}
  setting the \code{chemSpiderToken} argument is mandatory.

  When a local database is set (\emph{i.e.} \code{sdf}, \code{psv},
  \code{csv}, \code{comptox}, \code{pubchemlite}) the file location of the
  database should be set in the \code{LocalDatabasePath} value via the
  \code{extraOpts} argument or using the
  \code{patRoon.path.MetFragCompTox}/\code{patRoon.path.MetFragPubChemLite}
  option (only when \code{database="comptox"} or
  \code{database="pubchemlite"}).

  Examples: \verb{options(patRoon.path.MetFragCompTox =
  "C:/CompTox_17March2019_SelectMetaData.csv")} \verb{extraOpts =
  list(LocalDatabasePath = "C:/myDB.csv")}.

  For \code{database="comptox"} the files can be obtained from
  \href{ftp://newftp.epa.gov/COMPTOX/Sustainable_Chemistry_Data/Chemistry_Dashboard/MetFrag_metadata_files}{here}.
   Furthermore, the files with additions for
  \href{smoking}{https://zenodo.org/record/3364464#.XnjM-XLvKUk} and
  \href{wastewater}{https://zenodo.org/record/3472781#.XnjMAHLvKUk} metadata
  are also supported. Note that only recent \command{MetFrag} versions (>=
  \samp{2.4.5}) support these libraries.
}

\references{
\insertRef{Ruttkies2016}{patRoon}

\insertRef{Dhrkop2019}{patRoon} \cr\cr \insertRef{Duhrkop2015}{patRoon} \cr\cr
  \insertRef{Duhrkop2015-2}{patRoon} \cr\cr \insertRef{Bcker2008}{patRoon}
}
\seealso{
\code{\link{compounds-class}}
}
