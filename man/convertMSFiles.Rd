% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/convert.R
\name{convertMSFiles}
\alias{convertMSFiles}
\alias{MSFileFormats}
\title{MS data conversion}
\usage{
MSFileFormats(algorithm = "pwiz", vendor = FALSE)

convertMSFiles(
  files = NULL,
  outPath = NULL,
  dirs = TRUE,
  anaInfo = NULL,
  from = NULL,
  to = "mzML",
  overWrite = FALSE,
  algorithm = "pwiz",
  centroid = algorithm != "openms",
  filters = NULL,
  extraOpts = NULL,
  PWizBatchSize = 1,
  logPath = file.path("log", "convert"),
  maxProcAmount = getOption("patRoon.maxProcAmount")
)
}
\arguments{
\item{algorithm}{Either \code{"pwiz"} (implemented by \command{msConvert} of
ProteoWizard), \code{"openms"} (implemented by \command{FileConverter} of
OpenMS) or \code{"bruker"} (implemented by DataAnalysis).}

\item{vendor}{If \code{TRUE} only vendor formats are returned.}

\item{files, dirs}{The \code{files} argument should be a \code{character}
vector with input files. If \code{files} contains directories and
\code{dirs=TRUE} then files from these directories are also considered. An
alternative method to specify input files is by the \code{anaInfo}
argument. If the latter is specified \code{files} may be \code{NULL}.}

\item{outPath}{A character vector specifying directories that should be used
for the output. Will be re-cycled if necessary. If \code{NULL}, output
directories will be kept the same as the input directories.}

\item{anaInfo}{An \link[=analysis-information]{analysis info table} used to
retrieve input files. Either this argument or \code{files} (or both) should
be set (\emph{i.e.} not \code{NULL}).}

\item{from}{Input format (see below). These are used to find analyses when
\code{dirs=TRUE} or \code{anaInfo} is set.}

\item{to}{Output format: \code{"mzXML"} or \code{"mzML"}.}

\item{overWrite}{Should existing destination file be overwritten
(\code{TRUE}) or not (\code{FALSE})?}

\item{centroid}{Set to \code{TRUE} to enable centroiding (not supported if
\code{algorithm="openms"}). In addition, when \code{algorithm="pwiz"} the
value may be \code{"vendor"} to perform centroiding with the vendor
algorithm or \code{"cwt"} to use ProteoWizard's wavelet algorithm.}

\item{filters}{When \code{algorithm="pwiz"}: a \code{character} vector
specifying one or more filters. The elements of the specified vector are
directly passed to the \code{--filter} option (see
\href{http://proteowizard.sourceforge.net/tools/filters.html}{here})}

\item{extraOpts}{A \code{character} vector specifying any extra commandline
parameters passed to \command{msConvert} or \command{FileConverter}. Set to
\code{NULL} to ignore. For options: see
\href{https://abibuilder.informatik.uni-tuebingen.de/archive/openms/Documentation/release/latest/html/TOPP_FileConverter.html}{FileConverter}
 and
\href{http://proteowizard.sourceforge.net/tools/msconvert.html}{msConvert}.}

\item{PWizBatchSize}{When \code{algorithm="pwiz"}: the number of analyses to
process by a single call to \command{msConvert}. Usually a value of one is
most efficient. Set to zero to run all analyses all at once from a single
call.}

\item{logPath}{Destination directory for log files with output from executed
commands. Will be created if non-existant. Set to \code{NULL} to disable
logging.}

\item{maxProcAmount}{Maximum number of processes to run for parallelization.
Usually a number close to the amount of physical cores yields most
efficient results.}
}
\description{
Conversion of MS analysis files between several open and closed data formats.
}
\details{
\code{MSFileFormats} returns a \code{character} with all supported
  input formats (see below).

\code{convertMSFiles} converts the data format of an analysis to
  another. It uses tools from
  \href{http://proteowizard.sourceforge.net/}{ProteoWizard}
  (\command{msConvert} command), \href{http://www.openms.de/}{OpenMS}
  (\command{FileConverter} command) or Bruker DataAnalysis to perform the
  conversion. Supported input and output formats include \file{mzXML},
  \file{.mzML} and several vendor formats, depending on which algorithm is
  used.
}
\section{Conversion formats}{
 Possible output formats (\code{to} argument) are
  \code{mzXML} and \code{mzML}.

  Possible input formats (\code{from} argument) depend on the algorithm that
  was chosen and may include:

  \itemize{

  \item \code{thermo}: Thermo \file{.RAW} files (only
  \code{algorithm="pwiz"}).

  \item \code{bruker}: Bruker \file{.d}, \file{.yep}, \file{.baf} and
  \file{.fid} files (only \code{algorithm="pwiz"} or
  \code{algorithm="bruker"}).

  \item \code{agilent}: Agilent \file{.d} files (only
  \code{algorithm="pwiz"}).

  \item \code{ab}: AB Sciex \file{.wiff} files (only
  \code{algorithm="pwiz"}).

  \item \code{waters} Waters \file{.RAW} files (only
  \code{algorithm="pwiz"}).

  \item \code{mzXML}/\code{mzML}: Open format \file{.mzXML}/\file{.mzML}
  files (only \code{algorithm="pwiz"} or \code{algorithm="openms"}).

  }

  Note that the actual supported file formats of ProteoWizard depend on how
  it was installed (see
  \href{http://proteowizard.sourceforge.net/formats/index.html}{here}).
}

\examples{
\dontrun{
# Use FileConverter of OpenMS to convert between open mzXML/mzML format
convertMSFiles("standard-1.mzXML", to = "mzML", algorithm = "openms")

# Convert all Thermo .RAW files in the analyses/raw directory to mzML and
# store the files in analyses/mzml. During conversion files are centroided by
# the peakPicking filter and only MS 1 data is kept.
convertMSFiles("analyses/raw", "analyses/mzml", dirs = TRUE, from = "thermo",
               centroid = "vendor", filters = "msLevel 1")
}

}
\references{
\insertRef{Rst2016}{patRoon} \cr\cr
  \insertRef{Chambers2012}{patRoon}
}
