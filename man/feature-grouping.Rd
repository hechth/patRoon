% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/main.R, R/feature_groups.R,
%   R/feature_groups-bruker.R, R/feature_groups-envimass.R,
%   R/feature_groups-openms.R, R/feature_groups-xcms.R, R/feature_groups-xcms3.R
\name{feature-grouping}
\alias{feature-grouping}
\alias{groupFeatures,features-method}
\alias{groupFeatures}
\alias{importFeatureGroups}
\alias{importFeatureGroupsBrukerPA}
\alias{importFeatureGroupsEnviMass}
\alias{groupFeaturesOpenMS}
\alias{groupFeaturesXCMS}
\alias{importFeatureGroupsXCMS}
\alias{groupFeaturesXCMS3}
\alias{importFeatureGroupsXCMS3}
\title{Grouping of features}
\usage{
\S4method{groupFeatures}{features}(feat, algorithm, ..., verbose = TRUE)

importFeatureGroups(path, type, ...)

importFeatureGroupsBrukerPA(
  path,
  feat,
  rtWindow = 12,
  mzWindow = 0.005,
  intWindow = 5,
  warn = TRUE
)

importFeatureGroupsEnviMass(path, feat, positive)

groupFeaturesOpenMS(
  feat,
  rtalign = TRUE,
  QT = FALSE,
  maxAlignRT = 30,
  maxAlignMZ = 0.005,
  maxGroupRT = 12,
  maxGroupMZ = 0.005,
  verbose = TRUE
)

groupFeaturesXCMS(
  feat,
  rtalign = TRUE,
  exportedData = TRUE,
  groupArgs = list(mzwid = 0.015),
  retcorArgs = list(method = "obiwarp"),
  verbose = TRUE
)

importFeatureGroupsXCMS(xs, analysisInfo)

groupFeaturesXCMS3(
  feat,
  rtalign = TRUE,
  groupParam = xcms::PeakDensityParam(sampleGroups = analysisInfo(feat)$group),
  retAlignParam = xcms::ObiwarpParam(),
  verbose = TRUE
)

importFeatureGroupsXCMS3(xdata, analysisInfo)
}
\arguments{
\item{feat}{The \code{\link{features}} to be grouped.
\code{importFeatureGroupsBrukerPA} and \code{importFeatureGroupsEnviMass}
only support features generated by \code{\link{findFeaturesBruker}} and
\code{\link{importFeaturesEnviMass}}, respectively.}

\item{algorithm}{A character string describing the algorithm that should be
used: \code{"openms"}, \code{"xcms"}, \code{"xcms3"}}

\item{\dots}{Any parameters to be passed to the selected grouping/importing
algorithm.}

\item{verbose}{if \code{FALSE} then no text output will be shown.}

\item{path}{The path that should be used for importing. For
\code{importFeatureGroupsBrukerPA} an exported 'bucket table' \file{.txt}
file from Bruker ProfileAnalysis, for \code{importFeatureGroupsBrukerTASQ}
an exported global result table (converted to \file{.csv}) and for
\code{importFeatureGroupsEnviMass} the path of the enviMass project.}

\item{type}{Which file type should be imported or exported: \code{"brukerpa"}
(Bruker ProfileAnalysis), \code{"brukertasq"} (Bruker TASQ),
\code{envimass} (\pkg{enviMass}, only import) or \code{"mzmine"} (MZMine,
only export).}

\item{rtWindow, mzWindow, intWindow}{Search window values for retention time
(seconds), \emph{m/z} (Da) and intensity used to find back features within
feature groups from PA (+/- the retention/mass/intensity value of a
feature).}

\item{warn}{Warn about missing or duplicate features when relating them back
from grouped features.}

\item{positive}{Whether data from positive (\code{TRUE}) or negative
(\code{FALSE}) should be loaded.}

\item{rtalign}{Enable retention time alignment.}

\item{QT}{If enabled, use \code{FeatureLinkerUnlabeledQT} instead of
\code{FeatureLinkerUnlabeled} for feature grouping.}

\item{maxAlignRT, maxAlignMZ}{Used for retention alignment. Maximum retention
time or m/z difference (seconds/Dalton) for feature pairing. Sets
\code{-algorithm:pairfinder:distance_RT:max_difference} and
\code{-algorithm:pairfinder:distance_MZ:max_difference} otpions,
respectively.}

\item{maxGroupRT, maxGroupMZ}{as \code{maxAlignRT} and \code{maxAlignMZ}, but
for grouping of features. Sets \code{-algorithm:distance_RT:max_difference}
and \code{-algorithm:distance_MZ:max_difference} options, respectively.}

\item{exportedData}{Set to \code{TRUE} if analyses were exported as
\code{mzXML} or \code{mzML} files.}

\item{groupArgs, retcorArgs}{named \code{character vector} that can contain
extra parameters to be used by \code{\link[xcms:group-methods]{xcms::group}} and
\code{\link[xcms:retcor-methods]{xcms::retcor}}, respectively.}

\item{xs}{An \code{\link{xcmsSet}} object.}

\item{analysisInfo}{A \code{data.frame} with \link[=analysis-information]{analysis info}.}

\item{groupParam, retAlignParam}{parameter object that is directly passed to
\code{\link[xcms:groupChromPeaks]{xcms::groupChromPeaks}} and
\code{\link[xcms:adjustRtime]{xcms::adjustRtime}}, respectively.}

\item{xdata}{An \code{\link{XCMSnExp}} object.}
}
\value{
An object of a class which is derived from
  \code{\link{featureGroups}}.
}
\description{
Functions and classes for grouping of features across analyses.
}
\details{
After \link[=feature-finding]{features have been found} the logical next step
is to align and group them across analyses. This process is necessary to
allow comparison of features between multiple analyses, which otherwise would
be difficult due to small deviations in retention and mass data. Thus,
algorithms of 'feature groupers' are used to collect features with similar
retention and mass data. In addition, advanced retention time alignment
algorithms exist to enhance grouping of features even with relative large
retention time deviations (\emph{e.g.} possibly observed from analyses
collected over a long period). Like \link[=feature-finding]{finding of
features}, various algorithms are supported which may have many parameters
that can be fine-tuned. This fine-tuning is likely to be necessary, since
optimal settings often depend on applied methodology and instrumentation.

\code{groupFeatures} is a generic function that will group features
  using one of the supported algorithms. The actual functionality is provided
  by algorithm specific functions such as \code{groupFeaturesOpenMS} and
  \code{groupFeaturesXCMS3}. While these functions may be called directly,
  \code{groupFeatures} provides a generic interface and is therefore usually
  preferred.

\code{importFeatureGroups} is a generic function to import feature
  groups produced by other software. The actual functionality is provided by
  specific functions such as \code{importFeatureGroupsBrukerPA} and
  \code{importFeatureGroupsEnviMass}.

\code{importFeatureGroupsBrukerPA} imports grouped features
  generated with Bruker ProfileAnalysis (PA). To do so, a 'bucket table'
  should be generated using PA and exported as \file{.txt} file. Please note
  that this function only supports features generated by
  \code{\link{findFeaturesBruker}} and it is \strong{crucial} that
  DataAnalysis files remain unchanged when features are collected and the
  bucket table is generated. Furthermore, please note that PA does not retain
  information about originating features for generated buckets. For this
  reason, this function tries to find back the original features and care
  must be taken to correctly specify search parameters (\code{rtWindow},
  \code{mzWindow}, \code{intWindow}).

\code{importFeatureGroupsEnviMass} imports grouped features
  ('profiles') generated with \pkg{enviMass}. Note that this function
  \emph{only} imports 'raw' profiles, \emph{not} any results from further
  componentization steps performed in \pkg{enviMass}. Furthermore, this
  functionality has only been tested with older versions of \pkg{enviMass}.
  Finally, please note that this function only supports features imported by
  \code{\link{importFeaturesEnviMass}} (obviously, the same project should be
  used for both importing functions).

\code{groupFeaturesOpenMS} uses the OpenMS tools for grouping of
  features (see \url{http://www.openms.de}). Retention times may be aligned
  by the
  \href{https://abibuilder.informatik.uni-tuebingen.de/archive/openms/Documentation/release/latest/html/TOPP_MapAlignerPoseClustering.html}{MapAlignerPoseClustering}
   TOPP tool. Grouping is achieved by either the
  \href{https://abibuilder.informatik.uni-tuebingen.de/archive/openms/Documentation/release/latest/html/TOPP_FeatureLinkerUnlabeled.html}{FeatureLinkerUnlabeled}
   or
  \href{https://abibuilder.informatik.uni-tuebingen.de/archive/openms/Documentation/release/latest/html/TOPP_FeatureLinkerUnlabeledQT.html}{FeatureLinkerUnlabeledQT}
   TOPP tools.

\code{groupFeaturesXCMS} uses the \pkg{xcms} package for grouping of
  features. Grouping of features and alignment of their retention times are
  performed with the \code{\link[xcms:group-methods]{xcms::group}} and
  \code{\link[xcms:retcor-methods]{xcms::retcor}} functions, respectively.
  Both functions have an extensive list of parameters to modify their
  behaviour and may therefore be used to potentially optimize results.

\code{importFeatureGroupsXCMS} converts grouped features from an
  \code{\link{xcmsSet}} object (from the \pkg{xcms} package).

\code{groupFeaturesXCMS3} uses the new interface from the \pkg{xcms}
  package for grouping of features. Grouping of features and alignment of
  their retention times are performed with the
  \code{\link[xcms:groupChromPeaks]{xcms::groupChromPeaks}} and
  \code{\link[xcms:adjustRtime]{xcms::adjustRtime}} functions, respectively.
  Both of these functions support an extensive amount of parameters that
  modify their behaviour and may therefore require optimization.

\code{importFeatureGroupsXCMS3} converts grouped features from an
  \code{\link{XCMSnExp}} object (from the \pkg{xcms} package).
}
\references{
\insertRef{Rst2016}{patRoon} \cr\cr
  \href{https://pugixml.org/}{pugixml} (via \href{http://www.rcpp.org/}{Rcpp}) is used to process OpenMS XML output. \cr\cr
  \addCitations{Rcpp}{1} \cr\cr
  \addCitations{Rcpp}{2} \cr\cr
  \addCitations{Rcpp}{3}

\addCitations{xcms}{1} \cr\cr
  \addCitations{xcms}{2} \cr\cr
  \addCitations{xcms}{3}

\addCitations{xcms}{1} \cr\cr \addCitations{xcms}{2} \cr\cr
  \addCitations{xcms}{3}
}
\seealso{
\code{\link{featureGroups-class}}
}
